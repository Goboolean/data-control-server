// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/grpc/stock-fetch-server.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StockConfigurator_UpdateStockConfiguration_FullMethodName = "/api.StockConfigurator/UpdateStockConfiguration"
)

// StockConfiguratorClient is the client API for StockConfigurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockConfiguratorClient interface {
	UpdateStockConfiguration(ctx context.Context, in *StockConfigUpdateRequest, opts ...grpc.CallOption) (*StockConfigUpdateResponse, error)
}

type stockConfiguratorClient struct {
	cc grpc.ClientConnInterface
}

func NewStockConfiguratorClient(cc grpc.ClientConnInterface) StockConfiguratorClient {
	return &stockConfiguratorClient{cc}
}

func (c *stockConfiguratorClient) UpdateStockConfiguration(ctx context.Context, in *StockConfigUpdateRequest, opts ...grpc.CallOption) (*StockConfigUpdateResponse, error) {
	out := new(StockConfigUpdateResponse)
	err := c.cc.Invoke(ctx, StockConfigurator_UpdateStockConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockConfiguratorServer is the server API for StockConfigurator service.
// All implementations must embed UnimplementedStockConfiguratorServer
// for forward compatibility
type StockConfiguratorServer interface {
	UpdateStockConfiguration(context.Context, *StockConfigUpdateRequest) (*StockConfigUpdateResponse, error)
	mustEmbedUnimplementedStockConfiguratorServer()
}

// UnimplementedStockConfiguratorServer must be embedded to have forward compatible implementations.
type UnimplementedStockConfiguratorServer struct {
}

func (UnimplementedStockConfiguratorServer) UpdateStockConfiguration(context.Context, *StockConfigUpdateRequest) (*StockConfigUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStockConfiguration not implemented")
}
func (UnimplementedStockConfiguratorServer) mustEmbedUnimplementedStockConfiguratorServer() {}

// UnsafeStockConfiguratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockConfiguratorServer will
// result in compilation errors.
type UnsafeStockConfiguratorServer interface {
	mustEmbedUnimplementedStockConfiguratorServer()
}

func RegisterStockConfiguratorServer(s grpc.ServiceRegistrar, srv StockConfiguratorServer) {
	s.RegisterService(&StockConfigurator_ServiceDesc, srv)
}

func _StockConfigurator_UpdateStockConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockConfiguratorServer).UpdateStockConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockConfigurator_UpdateStockConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockConfiguratorServer).UpdateStockConfiguration(ctx, req.(*StockConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockConfigurator_ServiceDesc is the grpc.ServiceDesc for StockConfigurator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockConfigurator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.StockConfigurator",
	HandlerType: (*StockConfiguratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateStockConfiguration",
			Handler:    _StockConfigurator_UpdateStockConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/stock-fetch-server.proto",
}
